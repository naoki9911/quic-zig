const std = @import("std");
const packet = @import("packet.zig");
const key = @import("key.zig");
const aead = @import("aead.zig");
const tls13 = @import("tls13");
const ArrayList = std.ArrayList;
const Aes128Gcm = std.crypto.aead.aes_gcm.Aes128Gcm;
const dh = std.crypto.dh;

const ConnectionID = std.BoundedArray(u8, 20);

pub const InitialCryptoFrameBuilder = struct {
    random: [32]u8 = undefined,
    src_con_id: ConnectionID,
    dst_con_id: ConnectionID,
    packet_number: u32,
    session_id: tls13.msg.SessionID,
    cipher_suites: ArrayList(tls13.msg.CipherSuite),
    extensions: ArrayList(tls13.extension.Extension),

    const Self = @This();
    pub fn init(allocator: std.mem.Allocator) !Self {
        return .{
            .src_con_id = try ConnectionID.init(0),
            .dst_con_id = try ConnectionID.init(0),
            .packet_number = 0,
            .session_id = try tls13.msg.SessionID.init(0),
            .cipher_suites = ArrayList(tls13.msg.CipherSuite).init(allocator),
            .extensions = ArrayList(tls13.extension.Extension).init(allocator),
        };
    }

    pub fn deinit(self: Self) void {
        self.cipher_suites.deinit();
        for (self.extensions.items) |e| {
            e.deinit();
        }
        self.extensions.deinit();
    }

    pub fn encodeToSlice(self: Self, buf: []u8, allocator: std.mem.Allocator) ![]u8 {
        var start_idx: usize = 100;
        var end_idx: usize = start_idx;
        var writeStream = std.io.fixedBufferStream(buf[start_idx..]);
        var ch = tls13.client_hello.ClientHello.init(self.random, self.session_id, allocator);
        ch.cipher_suites.deinit();
        ch.extensions.deinit();
        ch.cipher_suites = self.cipher_suites;
        ch.extensions = self.extensions;
        const hs = tls13.handshake.Handshake{ .client_hello = ch };
        const enc_len = try hs.encode(writeStream.writer());

        const cf = packet.CryptoFrame{
            .frame_type = .{ .length = 1, .value = @intFromEnum(packet.FrameType.crypto) },
            .offset = .{ .length = 1, .value = 0 },
            .len = .{ .length = 2, .value = enc_len },
            .data = &[_]u8{},
        };
        end_idx += enc_len;
        start_idx -= cf.header_length();
        _ = cf.encodeToSliceWithoutData(buf[start_idx..]);

        // for packet number
        // this denotes the tail of InitialPacket header.
        const enc_idx = start_idx;
        start_idx -= 4;
        std.mem.writeInt(u32, buf[start_idx..][0..4], self.packet_number, .big);

        var pkt = packet.InitialPacket{
            .lhp = .{
                .packet_type = .Initial,
                .type_specific_bits = 0,
                .version = 1,
                .destination_connection_id = self.dst_con_id.slice(),
                .source_connection_id = self.src_con_id.slice(),
            },
            .token_length = .{ .length = 1, .value = 0 },
            .token = &[_]u8{},
            .sample = buf[start_idx + 4 .. start_idx + 4 + 16][0..16],
            .protected_offset = start_idx,
            .length = .{ .length = 2, .value = 0 },
        };
        // we assume MTU is 1200 bytes
        pkt.length.value = 1200 - pkt.header_length();

        // current payload length + AES128GCM's tag length
        const cur_payload_len = (end_idx - start_idx) + Aes128Gcm.tag_length;

        // if the space is left, we must fill it with padding frame
        if (cur_payload_len < pkt.length.value) {
            const pad_len = pkt.length.value - cur_payload_len;
            const pad = packet.PaddingFrame.init(pad_len);
            end_idx += pad.encodeToSlice(buf[end_idx..]);
        }

        start_idx -= pkt.header_length();
        _ = pkt.encodeToSlice(buf[start_idx..], 4);

        const secret = try key.InitialSecret.generate(pkt.lhp.destination_connection_id);
        const nonce = packet.getNonce(self.packet_number, secret.client_secret.iv);
        _ = aead.EasyAes128Gcm.encrypt(buf[enc_idx..], buf[enc_idx..end_idx], buf[start_idx..enc_idx], nonce, secret.client_secret.key);
        end_idx += Aes128Gcm.tag_length;

        packet.lockHeaderProtection(buf[start_idx..], pkt.header_length(), 4, pkt.sample, secret.client_secret.hp);

        return buf[start_idx..end_idx];
    }
};

pub const Client = struct {
    src_con_id: ConnectionID,
    dst_con_id: ConnectionID,

    x25519_priv_key: [std.crypto.dh.X25519.secret_length]u8 = undefined,
    x25519_pub_key: [std.crypto.dh.X25519.public_length]u8 = undefined,
    send_buf: [1500]u8 = undefined,
    allocator: std.mem.Allocator,

    const Self = @This();
    pub fn new(allocator: std.mem.Allocator, x25519_priv_key: [std.crypto.dh.X25519.secret_length]u8) !Self {
        var res = Client{
            .src_con_id = try ConnectionID.init(0),
            .dst_con_id = try ConnectionID.init(0),
            .allocator = allocator,
        };

        @memcpy(&res.x25519_priv_key, &x25519_priv_key);
        res.x25519_pub_key = try std.crypto.dh.X25519.recoverPublicKey(res.x25519_priv_key);

        return res;
    }

    pub fn create_initial_packet(self: *Self) ![]u8 {
        var builder = try InitialCryptoFrameBuilder.init(self.allocator);
        defer builder.deinit();
        builder.src_con_id = self.src_con_id;
        builder.dst_con_id = self.dst_con_id;
        builder.packet_number = 1;

        // zig fmt: off
        const random = [_]u8{
        0xEB, 0xF8, 0xFA, 0x56, 0xF1, 0x29, 0x39, 0xB9, 0x58, 0x4A,
        0x38, 0x96, 0x47, 0x2E, 0xC4, 0x0B, 0xB8, 0x63, 0xCF, 0xD3,
        0xE8, 0x68, 0x04, 0xFE, 0x3A, 0x47, 0xF0, 0x6A, 0x2B, 0x69,
        0x48, 0x4C
        };
        // zig fmt: on
        std.mem.copyForwards(u8, &builder.random, &random);
        try builder.cipher_suites.append(.TLS_AES_128_GCM_SHA256);

        // Extension SupportedGroups
        var sg = tls13.extension.NamedGroupList.init(self.allocator);
        try sg.groups.append(.x25519);
        try builder.extensions.append(.{ .supported_groups = sg });

        // Extension SupportedVresions
        var sv = try tls13.extension.SupportedVersions.init(.client_hello);
        try sv.versions.append(0x0304); //TLSv1.3
        try builder.extensions.append(.{ .supported_versions = sv });

        // Extension KeyShare
        var ks = tls13.key_share.KeyShare.init(self.allocator, .client_hello, false);
        const entry_x25519 = try tls13.key_share.KeyShareEntry.init(.x25519, 32, self.allocator);
        @memcpy(entry_x25519.key_exchange, &self.x25519_pub_key);
        try ks.entries.append(entry_x25519);
        try builder.extensions.append(.{ .key_share = ks });

        // Extension Signature Algorithms
        var sa = tls13.signature_scheme.SignatureSchemeList.init(self.allocator);
        try sa.algos.append(.ecdsa_secp256r1_sha256);
        try builder.extensions.append(.{ .signature_algorithms = sa });

        // Extension ALPN
        const an = try tls13.alpn.ALPN.init(self.allocator, 7);
        @memcpy(an.buf, &[_]u8{ 0x00, 0x05, 0x04, 0x74, 0x65, 0x73, 0x74 }); // alpn = 'test'
        try builder.extensions.append(.{ .application_layer_protocol_negotiation = an });

        // Extension QuicTransportParameters
        var qp = tls13.quic.TransportParameters.init(self.allocator);
        const qp1 = try tls13.quic.TransportParameter.init(.initial_source_connection_id, 8, self.allocator);
        @memcpy(qp1.value, self.src_con_id.slice());
        try qp.params.append(qp1);
        try builder.extensions.append(.{ .quic_transport_parameters = qp });

        const enc_buf = try builder.encodeToSlice(&self.send_buf, self.allocator);
        return enc_buf;
    }
};

const expect = std.testing.expect;
test "create client hello initial packet" {
    // zig fmt: off
    const cf = [_]u8{
    0x06, 0x00, 0x40, 0xF1,
    0x01, 0x00, 0x00, 0xED, 0x03, 0x03, 0xEB, 0xF8, 0xFA, 0x56,
    0xF1, 0x29, 0x39, 0xB9, 0x58, 0x4A, 0x38, 0x96, 0x47, 0x2E,
    0xC4, 0x0B, 0xB8, 0x63, 0xCF, 0xD3, 0xE8, 0x68, 0x04, 0xFE,
    0x3A, 0x47, 0xF0, 0x6A, 0x2B, 0x69, 0x48, 0x4C, 0x00, 0x00,
    0x04, 0x13, 0x01, 0x13, 0x02, 0x01, 0x00, 0x00, 0xC0, 0x00,
    0x00, 0x00, 0x10, 0x00, 0x0E, 0x00, 0x00, 0x0B, 0x65, 0x78,
    0x61, 0x6D, 0x70, 0x6C, 0x65, 0x2E, 0x63, 0x6F, 0x6D, 0xFF,
    0x01, 0x00, 0x01, 0x00, 0x00, 0x0A, 0x00, 0x08, 0x00, 0x06,
    0x00, 0x1D, 0x00, 0x17, 0x00, 0x18, 0x00, 0x10, 0x00, 0x07,
    0x00, 0x05, 0x04, 0x61, 0x6C, 0x70, 0x6E, 0x00, 0x05, 0x00,
    0x05, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x00, 0x26,
    0x00, 0x24, 0x00, 0x1D, 0x00, 0x20, 0x93, 0x70, 0xB2, 0xC9,
    0xCA, 0xA4, 0x7F, 0xBA, 0xBA, 0xF4, 0x55, 0x9F, 0xED, 0xBA,
    0x75, 0x3D, 0xE1, 0x71, 0xFA, 0x71, 0xF5, 0x0F, 0x1C, 0xE1,
    0x5D, 0x43, 0xE9, 0x94, 0xEC, 0x74, 0xD7, 0x48, 0x00, 0x2B,
    0x00, 0x03, 0x02, 0x03, 0x04, 0x00, 0x0D, 0x00, 0x10, 0x00,
    0x0E, 0x04, 0x03, 0x05, 0x03, 0x06, 0x03, 0x02, 0x03, 0x08,
    0x04, 0x08, 0x05, 0x08, 0x06, 0x00, 0x2D, 0x00, 0x02, 0x01,
    0x01, 0x00, 0x1C, 0x00, 0x02, 0x40, 0x01, 0x00, 0x39, 0x00,
    0x32, 0x04, 0x08, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0x05, 0x04, 0x80, 0x00, 0xFF, 0xFF, 0x07, 0x04, 0x80,
    0x00, 0xFF, 0xFF, 0x08, 0x01, 0x10, 0x01, 0x04, 0x80, 0x00,
    0x75, 0x30, 0x09, 0x01, 0x10, 0x0F, 0x08, 0x83, 0x94, 0xC8,
    0xF0, 0x3E, 0x51, 0x57, 0x08, 0x06, 0x04, 0x80, 0x00, 0xFF,
    0xFF
    };
    _ = cf;

    const ch_random = [_]u8{
    0xEB, 0xF8, 0xFA, 0x56, 0xF1, 0x29, 0x39, 0xB9, 0x58, 0x4A,
    0x38, 0x96, 0x47, 0x2E, 0xC4, 0x0B, 0xB8, 0x63, 0xCF, 0xD3,
    0xE8, 0x68, 0x04, 0xFE, 0x3A, 0x47, 0xF0, 0x6A, 0x2B, 0x69,
    0x48, 0x4C
    };
        const recv_msg = [_]u8{
    0xC0, 0x00, 0x00, 0x00, 0x01, 0x08, 0x83, 0x94, 0xC8, 0xF0, 
    0x3E, 0x51, 0x57, 0x08, 0x00, 0x00, 0x44, 0x9E, 0x7B, 0x9A, 
    0xEC, 0x34, 0xD1, 0xB1, 0xC9, 0x8D, 0xD7, 0x68, 0x9F, 0xB8, 
    0xEC, 0x11, 0xD2, 0x42, 0xB1, 0x23, 0xDC, 0x9B, 0xD8, 0xBA, 
    0xB9, 0x36, 0xB4, 0x7D, 0x92, 0xEC, 0x35, 0x6C, 0x0B, 0xAB, 
    0x7D, 0xF5, 0x97, 0x6D, 0x27, 0xCD, 0x44, 0x9F, 0x63, 0x30, 
    0x00, 0x99, 0xF3, 0x99, 0x1C, 0x26, 0x0E, 0xC4, 0xC6, 0x0D, 
    0x17, 0xB3, 0x1F, 0x84, 0x29, 0x15, 0x7B, 0xB3, 0x5A, 0x12, 
    0x82, 0xA6, 0x43, 0xA8, 0xD2, 0x26, 0x2C, 0xAD, 0x67, 0x50, 
    0x0C, 0xAD, 0xB8, 0xE7, 0x37, 0x8C, 0x8E, 0xB7, 0x53, 0x9E, 
    0xC4, 0xD4, 0x90, 0x5F, 0xED, 0x1B, 0xEE, 0x1F, 0xC8, 0xAA, 
    0xFB, 0xA1, 0x7C, 0x75, 0x0E, 0x2C, 0x7A, 0xCE, 0x01, 0xE6, 
    0x00, 0x5F, 0x80, 0xFC, 0xB7, 0xDF, 0x62, 0x12, 0x30, 0xC8, 
    0x37, 0x11, 0xB3, 0x93, 0x43, 0xFA, 0x02, 0x8C, 0xEA, 0x7F, 
    0x7F, 0xB5, 0xFF, 0x89, 0xEA, 0xC2, 0x30, 0x82, 0x49, 0xA0, 
    0x22, 0x52, 0x15, 0x5E, 0x23, 0x47, 0xB6, 0x3D, 0x58, 0xC5, 
    0x45, 0x7A, 0xFD, 0x84, 0xD0, 0x5D, 0xFF, 0xFD, 0xB2, 0x03, 
    0x92, 0x84, 0x4A, 0xE8, 0x12, 0x15, 0x46, 0x82, 0xE9, 0xCF, 
    0x01, 0x2F, 0x90, 0x21, 0xA6, 0xF0, 0xBE, 0x17, 0xDD, 0xD0, 
    0xC2, 0x08, 0x4D, 0xCE, 0x25, 0xFF, 0x9B, 0x06, 0xCD, 0xE5, 
    0x35, 0xD0, 0xF9, 0x20, 0xA2, 0xDB, 0x1B, 0xF3, 0x62, 0xC2, 
    0x3E, 0x59, 0x6D, 0x11, 0xA4, 0xF5, 0xA6, 0xCF, 0x39, 0x48, 
    0x83, 0x8A, 0x3A, 0xEC, 0x4E, 0x15, 0xDA, 0xF8, 0x50, 0x0A, 
    0x6E, 0xF6, 0x9E, 0xC4, 0xE3, 0xFE, 0xB6, 0xB1, 0xD9, 0x8E, 
    0x61, 0x0A, 0xC8, 0xB7, 0xEC, 0x3F, 0xAF, 0x6A, 0xD7, 0x60, 
    0xB7, 0xBA, 0xD1, 0xDB, 0x4B, 0xA3, 0x48, 0x5E, 0x8A, 0x94, 
    0xDC, 0x25, 0x0A, 0xE3, 0xFD, 0xB4, 0x1E, 0xD1, 0x5F, 0xB6, 
    0xA8, 0xE5, 0xEB, 0xA0, 0xFC, 0x3D, 0xD6, 0x0B, 0xC8, 0xE3, 
    0x0C, 0x5C, 0x42, 0x87, 0xE5, 0x38, 0x05, 0xDB, 0x05, 0x9A, 
    0xE0, 0x64, 0x8D, 0xB2, 0xF6, 0x42, 0x64, 0xED, 0x5E, 0x39, 
    0xBE, 0x2E, 0x20, 0xD8, 0x2D, 0xF5, 0x66, 0xDA, 0x8D, 0xD5, 
    0x99, 0x8C, 0xCA, 0xBD, 0xAE, 0x05, 0x30, 0x60, 0xAE, 0x6C, 
    0x7B, 0x43, 0x78, 0xE8, 0x46, 0xD2, 0x9F, 0x37, 0xED, 0x7B, 
    0x4E, 0xA9, 0xEC, 0x5D, 0x82, 0xE7, 0x96, 0x1B, 0x7F, 0x25, 
    0xA9, 0x32, 0x38, 0x51, 0xF6, 0x81, 0xD5, 0x82, 0x36, 0x3A, 
    0xA5, 0xF8, 0x99, 0x37, 0xF5, 0xA6, 0x72, 0x58, 0xBF, 0x63, 
    0xAD, 0x6F, 0x1A, 0x0B, 0x1D, 0x96, 0xDB, 0xD4, 0xFA, 0xDD, 
    0xFC, 0xEF, 0xC5, 0x26, 0x6B, 0xA6, 0x61, 0x17, 0x22, 0x39, 
    0x5C, 0x90, 0x65, 0x56, 0xBE, 0x52, 0xAF, 0xE3, 0xF5, 0x65, 
    0x63, 0x6A, 0xD1, 0xB1, 0x7D, 0x50, 0x8B, 0x73, 0xD8, 0x74, 
    0x3E, 0xEB, 0x52, 0x4B, 0xE2, 0x2B, 0x3D, 0xCB, 0xC2, 0xC7, 
    0x46, 0x8D, 0x54, 0x11, 0x9C, 0x74, 0x68, 0x44, 0x9A, 0x13, 
    0xD8, 0xE3, 0xB9, 0x58, 0x11, 0xA1, 0x98, 0xF3, 0x49, 0x1D, 
    0xE3, 0xE7, 0xFE, 0x94, 0x2B, 0x33, 0x04, 0x07, 0xAB, 0xF8, 
    0x2A, 0x4E, 0xD7, 0xC1, 0xB3, 0x11, 0x66, 0x3A, 0xC6, 0x98, 
    0x90, 0xF4, 0x15, 0x70, 0x15, 0x85, 0x3D, 0x91, 0xE9, 0x23, 
    0x03, 0x7C, 0x22, 0x7A, 0x33, 0xCD, 0xD5, 0xEC, 0x28, 0x1C, 
    0xA3, 0xF7, 0x9C, 0x44, 0x54, 0x6B, 0x9D, 0x90, 0xCA, 0x00, 
    0xF0, 0x64, 0xC9, 0x9E, 0x3D, 0xD9, 0x79, 0x11, 0xD3, 0x9F, 
    0xE9, 0xC5, 0xD0, 0xB2, 0x3A, 0x22, 0x9A, 0x23, 0x4C, 0xB3, 
    0x61, 0x86, 0xC4, 0x81, 0x9E, 0x8B, 0x9C, 0x59, 0x27, 0x72, 
    0x66, 0x32, 0x29, 0x1D, 0x6A, 0x41, 0x82, 0x11, 0xCC, 0x29, 
    0x62, 0xE2, 0x0F, 0xE4, 0x7F, 0xEB, 0x3E, 0xDF, 0x33, 0x0F, 
    0x2C, 0x60, 0x3A, 0x9D, 0x48, 0xC0, 0xFC, 0xB5, 0x69, 0x9D, 
    0xBF, 0xE5, 0x89, 0x64, 0x25, 0xC5, 0xBA, 0xC4, 0xAE, 0xE8, 
    0x2E, 0x57, 0xA8, 0x5A, 0xAF, 0x4E, 0x25, 0x13, 0xE4, 0xF0, 
    0x57, 0x96, 0xB0, 0x7B, 0xA2, 0xEE, 0x47, 0xD8, 0x05, 0x06, 
    0xF8, 0xD2, 0xC2, 0x5E, 0x50, 0xFD, 0x14, 0xDE, 0x71, 0xE6, 
    0xC4, 0x18, 0x55, 0x93, 0x02, 0xF9, 0x39, 0xB0, 0xE1, 0xAB, 
    0xD5, 0x76, 0xF2, 0x79, 0xC4, 0xB2, 0xE0, 0xFE, 0xB8, 0x5C, 
    0x1F, 0x28, 0xFF, 0x18, 0xF5, 0x88, 0x91, 0xFF, 0xEF, 0x13, 
    0x2E, 0xEF, 0x2F, 0xA0, 0x93, 0x46, 0xAE, 0xE3, 0x3C, 0x28, 
    0xEB, 0x13, 0x0F, 0xF2, 0x8F, 0x5B, 0x76, 0x69, 0x53, 0x33, 
    0x41, 0x13, 0x21, 0x19, 0x96, 0xD2, 0x00, 0x11, 0xA1, 0x98, 
    0xE3, 0xFC, 0x43, 0x3F, 0x9F, 0x25, 0x41, 0x01, 0x0A, 0xE1, 
    0x7C, 0x1B, 0xF2, 0x02, 0x58, 0x0F, 0x60, 0x47, 0x47, 0x2F, 
    0xB3, 0x68, 0x57, 0xFE, 0x84, 0x3B, 0x19, 0xF5, 0x98, 0x40, 
    0x09, 0xDD, 0xC3, 0x24, 0x04, 0x4E, 0x84, 0x7A, 0x4F, 0x4A, 
    0x0A, 0xB3, 0x4F, 0x71, 0x95, 0x95, 0xDE, 0x37, 0x25, 0x2D, 
    0x62, 0x35, 0x36, 0x5E, 0x9B, 0x84, 0x39, 0x2B, 0x06, 0x10, 
    0x85, 0x34, 0x9D, 0x73, 0x20, 0x3A, 0x4A, 0x13, 0xE9, 0x6F, 
    0x54, 0x32, 0xEC, 0x0F, 0xD4, 0xA1, 0xEE, 0x65, 0xAC, 0xCD, 
    0xD5, 0xE3, 0x90, 0x4D, 0xF5, 0x4C, 0x1D, 0xA5, 0x10, 0xB0, 
    0xFF, 0x20, 0xDC, 0xC0, 0xC7, 0x7F, 0xCB, 0x2C, 0x0E, 0x0E, 
    0xB6, 0x05, 0xCB, 0x05, 0x04, 0xDB, 0x87, 0x63, 0x2C, 0xF3, 
    0xD8, 0xB4, 0xDA, 0xE6, 0xE7, 0x05, 0x76, 0x9D, 0x1D, 0xE3, 
    0x54, 0x27, 0x01, 0x23, 0xCB, 0x11, 0x45, 0x0E, 0xFC, 0x60, 
    0xAC, 0x47, 0x68, 0x3D, 0x7B, 0x8D, 0x0F, 0x81, 0x13, 0x65, 
    0x56, 0x5F, 0xD9, 0x8C, 0x4C, 0x8E, 0xB9, 0x36, 0xBC, 0xAB, 
    0x8D, 0x06, 0x9F, 0xC3, 0x3B, 0xD8, 0x01, 0xB0, 0x3A, 0xDE, 
    0xA2, 0xE1, 0xFB, 0xC5, 0xAA, 0x46, 0x3D, 0x08, 0xCA, 0x19, 
    0x89, 0x6D, 0x2B, 0xF5, 0x9A, 0x07, 0x1B, 0x85, 0x1E, 0x6C, 
    0x23, 0x90, 0x52, 0x17, 0x2F, 0x29, 0x6B, 0xFB, 0x5E, 0x72, 
    0x40, 0x47, 0x90, 0xA2, 0x18, 0x10, 0x14, 0xF3, 0xB9, 0x4A, 
    0x4E, 0x97, 0xD1, 0x17, 0xB4, 0x38, 0x13, 0x03, 0x68, 0xCC, 
    0x39, 0xDB, 0xB2, 0xD1, 0x98, 0x06, 0x5A, 0xE3, 0x98, 0x65, 
    0x47, 0x92, 0x6C, 0xD2, 0x16, 0x2F, 0x40, 0xA2, 0x9F, 0x0C, 
    0x3C, 0x87, 0x45, 0xC0, 0xF5, 0x0F, 0xBA, 0x38, 0x52, 0xE5, 
    0x66, 0xD4, 0x45, 0x75, 0xC2, 0x9D, 0x39, 0xA0, 0x3F, 0x0C, 
    0xDA, 0x72, 0x19, 0x84, 0xB6, 0xF4, 0x40, 0x59, 0x1F, 0x35, 
    0x5E, 0x12, 0xD4, 0x39, 0xFF, 0x15, 0x0A, 0xAB, 0x76, 0x13, 
    0x49, 0x9D, 0xBD, 0x49, 0xAD, 0xAB, 0xC8, 0x67, 0x6E, 0xEF, 
    0x02, 0x3B, 0x15, 0xB6, 0x5B, 0xFC, 0x5C, 0xA0, 0x69, 0x48, 
    0x10, 0x9F, 0x23, 0xF3, 0x50, 0xDB, 0x82, 0x12, 0x35, 0x35, 
    0xEB, 0x8A, 0x74, 0x33, 0xBD, 0xAB, 0xCB, 0x90, 0x92, 0x71, 
    0xA6, 0xEC, 0xBC, 0xB5, 0x8B, 0x93, 0x6A, 0x88, 0xCD, 0x4E, 
    0x8F, 0x2E, 0x6F, 0xF5, 0x80, 0x01, 0x75, 0xF1, 0x13, 0x25, 
    0x3D, 0x8F, 0xA9, 0xCA, 0x88, 0x85, 0xC2, 0xF5, 0x52, 0xE6, 
    0x57, 0xDC, 0x60, 0x3F, 0x25, 0x2E, 0x1A, 0x8E, 0x30, 0x8F, 
    0x76, 0xF0, 0xBE, 0x79, 0xE2, 0xFB, 0x8F, 0x5D, 0x5F, 0xBB, 
    0xE2, 0xE3, 0x0E, 0xCA, 0xDD, 0x22, 0x07, 0x23, 0xC8, 0xC0, 
    0xAE, 0xA8, 0x07, 0x8C, 0xDF, 0xCB, 0x38, 0x68, 0x26, 0x3F, 
    0xF8, 0xF0, 0x94, 0x00, 0x54, 0xDA, 0x48, 0x78, 0x18, 0x93, 
    0xA7, 0xE4, 0x9A, 0xD5, 0xAF, 0xF4, 0xAF, 0x30, 0x0C, 0xD8, 
    0x04, 0xA6, 0xB6, 0x27, 0x9A, 0xB3, 0xFF, 0x3A, 0xFB, 0x64, 
    0x49, 0x1C, 0x85, 0x19, 0x4A, 0xAB, 0x76, 0x0D, 0x58, 0xA6, 
    0x06, 0x65, 0x4F, 0x9F, 0x44, 0x00, 0xE8, 0xB3, 0x85, 0x91, 
    0x35, 0x6F, 0xBF, 0x64, 0x25, 0xAC, 0xA2, 0x6D, 0xC8, 0x52, 
    0x44, 0x25, 0x9F, 0xF2, 0xB1, 0x9C, 0x41, 0xB9, 0xF9, 0x6F, 
    0x3C, 0xA9, 0xEC, 0x1D, 0xDE, 0x43, 0x4D, 0xA7, 0xD2, 0xD3, 
    0x92, 0xB9, 0x05, 0xDD, 0xF3, 0xD1, 0xF9, 0xAF, 0x93, 0xD1, 
    0xAF, 0x59, 0x50, 0xBD, 0x49, 0x3F, 0x5A, 0xA7, 0x31, 0xB4, 
    0x05, 0x6D, 0xF3, 0x1B, 0xD2, 0x67, 0xB6, 0xB9, 0x0A, 0x07, 
    0x98, 0x31, 0xAA, 0xF5, 0x79, 0xBE, 0x0A, 0x39, 0x01, 0x31, 
    0x37, 0xAA, 0xC6, 0xD4, 0x04, 0xF5, 0x18, 0xCF, 0xD4, 0x68, 
    0x40, 0x64, 0x7E, 0x78, 0xBF, 0xE7, 0x06, 0xCA, 0x4C, 0xF5, 
    0xE9, 0xC5, 0x45, 0x3E, 0x9F, 0x7C, 0xFD, 0x2B, 0x8B, 0x4C, 
    0x8D, 0x16, 0x9A, 0x44, 0xE5, 0x5C, 0x88, 0xD4, 0xA9, 0xA7, 
    0xF9, 0x47, 0x42, 0x41, 0xE2, 0x21, 0xAF, 0x44, 0x86, 0x00, 
    0x18, 0xAB, 0x08, 0x56, 0x97, 0x2E, 0x19, 0x4C, 0xD9, 0x34, 
    };
    // zig fmt: on

    var builder = try InitialCryptoFrameBuilder.init(std.testing.allocator);
    defer builder.deinit();
    try builder.dst_con_id.appendSlice(&[_]u8{ 0x83, 0x94, 0xC8, 0xF0, 0x3E, 0x51, 0x57, 0x08 });
    builder.packet_number = 2;

    std.mem.copyForwards(u8, &builder.random, &ch_random);
    try builder.cipher_suites.append(.TLS_AES_128_GCM_SHA256);
    try builder.cipher_suites.append(.TLS_AES_256_GCM_SHA384);

    // Extension ServerName
    var sn = tls13.server_name.ServerNameList.init(std.testing.allocator);
    try sn.server_name_list.append(try tls13.server_name.ServerName.fromHostName("example.com", std.testing.allocator));
    try builder.extensions.append(.{ .server_name = sn });

    // Extension RenegotiationInfo
    const ri = try tls13.renegotiation_info.RenegotiationInfo.init(std.testing.allocator, 1);
    ri.renegotinated_connection[0] = 0;
    try builder.extensions.append(.{ .renegotiation_info = ri });

    // Extension SupportedGroups
    var sg = tls13.extension.NamedGroupList.init(std.testing.allocator);
    try sg.groups.append(.x25519);
    try sg.groups.append(.secp256r1);
    try sg.groups.append(.secp384r1);
    try builder.extensions.append(.{ .supported_groups = sg });

    // Extension ALPN
    const an = try tls13.alpn.ALPN.init(std.testing.allocator, 7);
    @memcpy(an.buf, &[_]u8{ 0x00, 0x05, 0x04, 0x61, 0x6C, 0x70, 0x6E });
    try builder.extensions.append(.{ .application_layer_protocol_negotiation = an });

    // Extension StatusRequest
    const st = try tls13.status_request.StatusRequest.init(std.testing.allocator, 5);
    std.mem.copyForwards(u8, st.buf, &[_]u8{ 0x01, 0x00, 0x00, 0x00, 0x00 });
    try builder.extensions.append(.{ .status_request = st });

    // Extension KeyShare
    var ks = tls13.key_share.KeyShare.init(std.testing.allocator, .client_hello, false);
    const entry_x25519 = try tls13.key_share.KeyShareEntry.init(.x25519, 32, std.testing.allocator);
    @memcpy(entry_x25519.key_exchange, &[_]u8{ 0x93, 0x70, 0xB2, 0xC9, 0xCA, 0xA4, 0x7F, 0xBA, 0xBA, 0xF4, 0x55, 0x9F, 0xED, 0xBA, 0x75, 0x3D, 0xE1, 0x71, 0xFA, 0x71, 0xF5, 0x0F, 0x1C, 0xE1, 0x5D, 0x43, 0xE9, 0x94, 0xEC, 0x74, 0xD7, 0x48 });
    try ks.entries.append(entry_x25519);
    try builder.extensions.append(.{ .key_share = ks });

    // Extension SupportedVresions
    var sv = try tls13.extension.SupportedVersions.init(.client_hello);
    try sv.versions.append(0x0304); //TLSv1.3
    try builder.extensions.append(.{ .supported_versions = sv });

    // Extension Signature Algorithms
    var sa = tls13.signature_scheme.SignatureSchemeList.init(std.testing.allocator);
    try sa.algos.append(.ecdsa_secp256r1_sha256);
    try sa.algos.append(.ecdsa_secp384r1_sha384);
    try sa.algos.append(.ecdsa_secp521r1_sha512);
    try sa.algos.append(.ecdsa_sha1);
    try sa.algos.append(.rsa_pss_rsae_sha256);
    try sa.algos.append(.rsa_pss_rsae_sha384);
    try sa.algos.append(.rsa_pss_rsae_sha512);
    try builder.extensions.append(.{ .signature_algorithms = sa });

    // Extension PSKKeyExchangeModes
    var pk = tls13.psk_key_exchange_modes.PskKeyExchangeModes.init(std.testing.allocator);
    try pk.modes.append(.psk_dhe_ke);
    try builder.extensions.append(.{ .psk_key_exchange_modes = pk });

    // Extension RecordSizeLimit
    const rs = tls13.record_size_limit.RecordSizeLimit{ .record_size_limit = 16385 };
    try builder.extensions.append(.{ .record_size_limit = rs });

    // Extension QuicTransportParameters
    var qp = tls13.quic.TransportParameters.init(std.testing.allocator);

    const qp1 = try tls13.quic.TransportParameter.init(.initial_max_data, 8, std.testing.allocator);
    @memcpy(qp1.value, &[_]u8{ 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF });
    try qp.params.append(qp1);

    const qp2 = try tls13.quic.TransportParameter.init(.initial_max_stream_data_bidi_local, 4, std.testing.allocator);
    @memcpy(qp2.value, &[_]u8{ 0x80, 0x00, 0xFF, 0xFF });
    try qp.params.append(qp2);

    const qp3 = try tls13.quic.TransportParameter.init(.initial_max_stream_data_uni, 4, std.testing.allocator);
    @memcpy(qp3.value, &[_]u8{ 0x80, 0x00, 0xFF, 0xFF });
    try qp.params.append(qp3);

    const qp4 = try tls13.quic.TransportParameter.init(.initial_max_streams_bidi, 1, std.testing.allocator);
    @memcpy(qp4.value, &[_]u8{0x10});
    try qp.params.append(qp4);

    const qp5 = try tls13.quic.TransportParameter.init(.max_idle_timeout, 4, std.testing.allocator);
    @memcpy(qp5.value, &[_]u8{ 0x80, 0x00, 0x75, 0x30 });
    try qp.params.append(qp5);

    const qp6 = try tls13.quic.TransportParameter.init(.initial_max_streams_uni, 1, std.testing.allocator);
    @memcpy(qp6.value, &[_]u8{0x10});
    try qp.params.append(qp6);

    const qp7 = try tls13.quic.TransportParameter.init(.initial_source_connection_id, 8, std.testing.allocator);
    @memcpy(qp7.value, &[_]u8{ 0x83, 0x94, 0xC8, 0xF0, 0x3E, 0x51, 0x57, 0x08 });
    try qp.params.append(qp7);

    const qp8 = try tls13.quic.TransportParameter.init(.initial_max_stream_data_bidi_remote, 4, std.testing.allocator);
    @memcpy(qp8.value, &[_]u8{ 0x80, 0x00, 0xFF, 0xFF });
    try qp.params.append(qp8);

    try builder.extensions.append(.{ .quic_transport_parameters = qp });

    var buf = [_]u8{0} ** 1500;
    const enc_buf = try builder.encodeToSlice(&buf, std.testing.allocator);
    try expect(enc_buf.len == recv_msg.len);
    try expect(std.mem.eql(u8, enc_buf, &recv_msg));
}

test "first response from quic-go server" {
    // zig fmt: off
    // PEER_KEY ebf8fa56f12939b9584a3896472ec40bb863cfd3e86804fe3a47f06a2b69484c 265d8989365693ff3ce0dc296b7ecb7f4c06ca0452bfa58f8d793f996f63305e
    // EARLY_SECRET ebf8fa56f12939b9584a3896472ec40bb863cfd3e86804fe3a47f06a2b69484c 33ad0a1c607ec03b09e6cd9893680ce210adf300aa1f2660e1b22e10f170f92a
    // SHARED_KEY ebf8fa56f12939b9584a3896472ec40bb863cfd3e86804fe3a47f06a2b69484c a625adcdd87bce4c980e6d6f3e08b78ac4c6cd9689e018fff60d52cf24895203
    // HANDSHAKE_SECRET ebf8fa56f12939b9584a3896472ec40bb863cfd3e86804fe3a47f06a2b69484c 774922f1d9ace8bbe710d02128a1ab7a563bb7cc58186a65329da26292bf43a4
    // CLIENT_HANDSHAKE_TRAFFIC_SECRET ebf8fa56f12939b9584a3896472ec40bb863cfd3e86804fe3a47f06a2b69484c f183c276a9a925827671de104000758701ee67e8d3a2e1c185ab983de463c07e
    // SERVER_HANDSHAKE_TRAFFIC_SECRET ebf8fa56f12939b9584a3896472ec40bb863cfd3e86804fe3a47f06a2b69484c e12d1c85539e506e58a60e75337bf0f555806b2acbbc2307ea608e3099528e65
    // CLIENT_TRAFFIC_SECRET_0 ebf8fa56f12939b9584a3896472ec40bb863cfd3e86804fe3a47f06a2b69484c dfdd522b8ebb5f2b5d57c7ee8457040d69386dcd250acbb88b0e332119afa10c
    // SERVER_TRAFFIC_SECRET_0 ebf8fa56f12939b9584a3896472ec40bb863cfd3e86804fe3a47f06a2b69484c a8dd32943860b5811906a1b31e225d27c4ed4ad8ca0af4d8ab2d5b185d3b98fe

    const hs_ch_msg = [_]u8{
    0x01, 0x00, 0x00, 0x85, 0x03, 0x03, 0xEB, 0xF8, 0xFA, 0x56, 
    0xF1, 0x29, 0x39, 0xB9, 0x58, 0x4A, 0x38, 0x96, 0x47, 0x2E, 
    0xC4, 0x0B, 0xB8, 0x63, 0xCF, 0xD3, 0xE8, 0x68, 0x04, 0xFE, 
    0x3A, 0x47, 0xF0, 0x6A, 0x2B, 0x69, 0x48, 0x4C, 0x00, 0x00, 
    0x02, 0x13, 0x01, 0x01, 0x00, 0x00, 0x5A, 0x00, 0x0A, 0x00, 
    0x04, 0x00, 0x02, 0x00, 0x1D, 0x00, 0x2B, 0x00, 0x03, 0x02, 
    0x03, 0x04, 0x00, 0x33, 0x00, 0x26, 0x00, 0x24, 0x00, 0x1D, 
    0x00, 0x20, 0x26, 0x5D, 0x89, 0x89, 0x36, 0x56, 0x93, 0xFF, 
    0x3C, 0xE0, 0xDC, 0x29, 0x6B, 0x7E, 0xCB, 0x7F, 0x4C, 0x06, 
    0xCA, 0x04, 0x52, 0xBF, 0xA5, 0x8F, 0x8D, 0x79, 0x3F, 0x99, 
    0x6F, 0x63, 0x30, 0x5E, 0x00, 0x0D, 0x00, 0x04, 0x00, 0x02, 
    0x04, 0x03, 0x00, 0x10, 0x00, 0x07, 0x00, 0x05, 0x04, 0x74, 
    0x65, 0x73, 0x74, 0x00, 0x39, 0x00, 0x0A, 0x0F, 0x08, 0x83, 
    0x94, 0xC8, 0xF0, 0x3E, 0x51, 0x57, 0x08, };

    const resp_msg = [_]u8{
    0xCC, 0x00, 0x00, 0x00, 0x01, 0x08, 0x83, 0x94, 0xC8, 0xF0, 
    0x3E, 0x51, 0x57, 0x08, 0x04, 0x37, 0x20, 0x89, 0x15, 0x00, 
    0x41, 0xBE, 0xB5, 0xAC, 0xAA, 0x31, 0x39, 0xB1, 0x1B, 0x5C, 
    0xA9, 0x93, 0xF2, 0x0B, 0x5F, 0xDC, 0xBA, 0x37, 0x3B, 0xB8, 
    0x28, 0xEB, 0xD4, 0x49, 0x24, 0x68, 0x3A, 0x9A, 0x24, 0x2D, 
    0x3A, 0x87, 0xF7, 0x83, 0x64, 0x95, 0x35, 0x2F, 0xED, 0xF2, 
    0x53, 0x53, 0x4B, 0xEA, 0x1B, 0x12, 0xE8, 0x7C, 0x17, 0xEC, 
    0xCC, 0x75, 0x8F, 0x2A, 0x5B, 0x81, 0xA8, 0x46, 0xB7, 0xC5, 
    0x6D, 0x77, 0x4B, 0xB7, 0x3D, 0x8B, 0xDD, 0x3A, 0x8B, 0x36, 
    0x5C, 0x33, 0x4C, 0xD9, 0xA3, 0x69, 0xF7, 0x38, 0xE4, 0xFC, 
    0xD7, 0xF6, 0x4D, 0xE9, 0xB8, 0x6E, 0xF9, 0x90, 0xCA, 0x22, 
    0xC3, 0xE0, 0xA8, 0x76, 0x4B, 0x5F, 0xF0, 0x08, 0x88, 0x92, 
    0x9C, 0x52, 0xE5, 0x32, 0x96, 0x66, 0x40, 0x04, 0x88, 0xE5, 
    0xF0, 0x3A, 0xE2, 0x6E, 0x13, 0xD9, 0xC4, 0x76, 0x53, 0x6A, 
    0x53, 0x5D, 0x4A, 0x70, 0x37, 0xD0, 0x9D, 0x58, 0x4D, 0x4B, 
    0x91, 0xC5, 0x5E, 0x10, 0xD7, 0x34, 0x7B, 0x28, 0x0B, 0xB8, 
    0x91, 0x43, 0x01, 0x11, 0xA0, 0x34, 0x55, 0x97, 0xA1, 0xA2, 
    0x29, 0xCA, 0xB6, 0xA6, 0xF9, 0xDA, 0x91, 0x0E, 0xAA, 0x25, 
    0xEB, 0x14, 0xCB, 0xD7, 0x13, 0x3D, 0xED, 0xB9, 0x5F, 0xE7, 
    0xF0, 0x0B, 0x4D, 0x56, 0x6D, 0x10, 0xDA, 0xE0, 0x67, 0x32, 
    0xBC, 0x52, 0xFD, 0x20, 0x5E, 0xAA, 0x96, 0x8F, 0xF9, 0x52, 
    0xC6, 0xF9, 0xE6, 0x44, 0x65, 0x82, 0xFC, 0xE1, 0x94, 0xF6, 
    0x21, 0x66, 0x93, 0x6F, 0x70, 0x15, 0xFB, 0x1B, 0x31, 0x76, 
    0x0E, 0x0A, 0x23, 0x99, 0x29, 0x37, 0x08, 0x5E, 0x93, 0x00, 
    0x3E, 0x16, 0xE7, 0x50, 0x61, 0x8F, 0xC0, 0x29, 0xDC, 0x48, 
    0xA5, 0x35, 0x43, 0x5E, 0xD6, 0xEE, 0x53, 0xEA, 0x1E, 0xE6, 
    0x7A, 0xFC, 0xA9, 0x0B, 0x24, 0x86, 0xDC, 0x5D, 0xE0, 0x83, 
    0x38, 0x22, 0xAF, 0x45, 0xE1, 0x10, 0x67, 0x51, 0x5C, 0x20, 
    0x6B, 0x05, 0x58, 0x40, 0x1F, 0xDC, 0x09, 0x01, 0x29, 0x27, 
    0x8E, 0xF6, 0x96, 0x10, 0xA4, 0x41, 0x6B, 0x24, 0x7B, 0xFE, 
    0xC5, 0x53, 0xAA, 0xE5, 0x24, 0xFA, 0x6C, 0xD4, 0xF0, 0xFA, 
    0xC6, 0xC1, 0x34, 0x2A, 0xE6, 0xCC, 0xBD, 0xDB, 0xEA, 0x6C, 
    0x20, 0x0B, 0x89, 0x13, 0x04, 0xF1, 0x7C, 0xAA, 0xC9, 0xE6, 
    0x46, 0x69, 0x3C, 0x0B, 0xF2, 0xF1, 0x79, 0x89, 0x36, 0x47, 
    0x97, 0x9C, 0x7D, 0x6E, 0x1B, 0xAD, 0xE8, 0xCA, 0xE4, 0xE5, 
    0x0A, 0x8C, 0xE2, 0xE5, 0xC5, 0xD7, 0x8B, 0xD2, 0x9B, 0x1A, 
    0x79, 0x6C, 0x91, 0xE5, 0xEC, 0xD5, 0x4E, 0x13, 0xD3, 0x1D, 
    0x41, 0xF7, 0xC6, 0x1A, 0x3C, 0xBE, 0xE4, 0xAD, 0xEE, 0x3F, 
    0xCA, 0xB4, 0xDD, 0x26, 0x33, 0x0C, 0x56, 0xAE, 0xAD, 0x34, 
    0x08, 0x48, 0xBD, 0x00, 0x3F, 0x09, 0xDC, 0x11, 0x59, 0xCC, 
    0xFF, 0xFF, 0xD2, 0xA1, 0x49, 0xFB, 0x4D, 0x16, 0x6D, 0x92, 
    0xD0, 0x0E, 0x8E, 0x35, 0x4B, 0x07, 0x47, 0xEC, 0x01, 0x2F, 
    0x28, 0x66, 0xBD, 0xE9, 0x08, 0x2B, 0x64, 0x0D, 0x58, 0x71, 
    0x88, 0xCD, 0xA8, 0x96, 0xDA, 0x8D, 0x8E, 0x89, 0xF3, 0x44, 
    0xDC, 0xB4, 0xE8, 0x21, 0x53, 0x2E, 0x4F, 0x25, 0x9B, 0x1B, 
    0xC4, 0x14, 0x1D, 0xC4, 0x24, 0x05, 0xFA, 0x3C, 0x38, 0xEA, 
    0x16, 0x03, 0x1E, 0x5D, 0x2F, 0x11, 0x66, 0xC4, 0xE3, 0x00, 
    0x00, 0x00, 0x01, 0x08, 0x83, 0x94, 0xC8, 0xF0, 0x3E, 0x51, 
    0x57, 0x08, 0x04, 0x37, 0x20, 0x89, 0x15, 0x42, 0xE4, 0x22, 
    0x5E, 0xAC, 0x0F, 0x59, 0x76, 0xA8, 0x9F, 0xDE, 0x41, 0x32, 
    0xF0, 0x8D, 0x18, 0x9D, 0x26, 0x6E, 0x4F, 0xF7, 0x16, 0xEF, 
    0x87, 0x0F, 0x7A, 0x89, 0xB4, 0xAC, 0x20, 0x5C, 0x39, 0x90, 
    0x15, 0x4A, 0xA7, 0x29, 0x69, 0x92, 0x85, 0x98, 0x89, 0x8D, 
    0x89, 0x69, 0x7E, 0xFF, 0x5F, 0xEF, 0x8B, 0xC3, 0x8C, 0x99, 
    0x50, 0x99, 0xBF, 0xBB, 0x8E, 0x86, 0x99, 0x39, 0x31, 0x0E, 
    0xC5, 0xF1, 0x23, 0xA8, 0xB0, 0x54, 0xFD, 0x26, 0xE1, 0xE6, 
    0x1B, 0xDE, 0x64, 0x83, 0xFB, 0x44, 0xE4, 0x82, 0xBA, 0xBD, 
    0xBE, 0x3E, 0x89, 0x49, 0x46, 0x23, 0xFA, 0x69, 0x00, 0xE5, 
    0x5D, 0x20, 0xA3, 0xD1, 0x5D, 0xE5, 0x36, 0x71, 0x95, 0x92, 
    0x5A, 0x5E, 0xFD, 0x87, 0x5B, 0x20, 0x6B, 0x2A, 0x34, 0x8C, 
    0x7B, 0x18, 0xC3, 0x58, 0x7C, 0xAD, 0xBB, 0x96, 0x77, 0x6C, 
    0xB3, 0x26, 0x73, 0xC3, 0xA8, 0x28, 0xF9, 0x03, 0x91, 0x5C, 
    0xBD, 0x50, 0x1E, 0x9C, 0xEB, 0xBE, 0x73, 0x0C, 0xD9, 0x2E, 
    0x31, 0x68, 0xA2, 0x9E, 0x5D, 0x9B, 0x76, 0x69, 0xC5, 0xF5, 
    0xA0, 0x24, 0xBB, 0x88, 0x45, 0x3D, 0xDB, 0x66, 0x00, 0x1D, 
    0x04, 0x6C, 0x14, 0x62, 0x1A, 0x58, 0xA5, 0x19, 0x9C, 0x5D, 
    0xD7, 0x15, 0x08, 0x8E, 0xA4, 0x77, 0x79, 0x28, 0xF0, 0xD5, 
    0xCA, 0x6E, 0x5D, 0xE1, 0x19, 0x9A, 0x53, 0x90, 0xC6, 0x12, 
    0xFC, 0x34, 0x2C, 0xA0, 0x8A, 0xFB, 0x1D, 0x96, 0x9D, 0xCD, 
    0x64, 0x34, 0xDB, 0x7B, 0x71, 0x88, 0x85, 0x19, 0xFB, 0x3D, 
    0x5D, 0x9A, 0x85, 0x0D, 0xDE, 0xAC, 0xE7, 0x41, 0xBC, 0x0F, 
    0xCD, 0x46, 0x3D, 0x70, 0x30, 0x93, 0xB6, 0xE8, 0xFA, 0x04, 
    0xE1, 0xF3, 0x01, 0x36, 0x39, 0x03, 0x5C, 0x3B, 0xD0, 0x49, 
    0x06, 0xE2, 0xA6, 0xC9, 0x3A, 0x1B, 0x0D, 0x84, 0xDE, 0xF8, 
    0x6C, 0x4C, 0xDE, 0x2C, 0xA8, 0xFF, 0x99, 0x7B, 0x9F, 0x6F, 
    0xAE, 0x72, 0xF3, 0xB5, 0x8F, 0xA0, 0x1C, 0xE5, 0x8F, 0x6A, 
    0xBA, 0x26, 0xB5, 0x8F, 0x43, 0xF9, 0xA5, 0x69, 0x68, 0xE9, 
    0xE6, 0xAA, 0x88, 0x05, 0x68, 0xFB, 0x62, 0xA8, 0x90, 0x91, 
    0x24, 0xB2, 0xD3, 0x48, 0xFD, 0xEA, 0xD3, 0x2D, 0x3D, 0xEE, 
    0xBB, 0xCB, 0x92, 0x4A, 0xEB, 0x8C, 0xC3, 0xBF, 0xFF, 0xB4, 
    0x97, 0xAB, 0x2E, 0x89, 0x28, 0xF4, 0x3D, 0xFC, 0xF9, 0x4F, 
    0x94, 0x60, 0x82, 0xC0, 0x1E, 0x7B, 0xE9, 0x65, 0x38, 0x0D, 
    0x91, 0x61, 0xDC, 0x6C, 0x30, 0x29, 0x65, 0x85, 0xC7, 0x52, 
    0xA9, 0x42, 0xF0, 0x50, 0xC7, 0x95, 0xF4, 0x5B, 0xF6, 0x34, 
    0xC3, 0x7F, 0xB1, 0xE0, 0x6C, 0xFE, 0xC8, 0x86, 0xE8, 0x12, 
    0x3A, 0x4F, 0xFA, 0x19, 0xD2, 0xAF, 0xC4, 0xEF, 0x3B, 0xEA, 
    0x14, 0x49, 0x95, 0x45, 0x4D, 0xEF, 0x6C, 0xDD, 0x6A, 0x5F, 
    0xB3, 0xAF, 0x3C, 0x62, 0x7C, 0xBB, 0x7C, 0xF5, 0x0B, 0x09, 
    0xDD, 0x87, 0x56, 0x0F, 0xF6, 0x7B, 0x26, 0x79, 0xCF, 0x39, 
    0xB6, 0xFF, 0x10, 0xBD, 0x59, 0xE9, 0xA1, 0x21, 0x41, 0x3A, 
    0xB3, 0x47, 0x73, 0x29, 0x8A, 0xE3, 0xF9, 0x4A, 0x2C, 0x96, 
    0xAC, 0xC6, 0x75, 0xFA, 0x8B, 0x65, 0x1F, 0xE5, 0xAF, 0xBD, 
    0x90, 0x21, 0xBC, 0x03, 0x33, 0xC6, 0xE9, 0xF9, 0x4B, 0x77, 
    0x27, 0x19, 0x8D, 0x55, 0x94, 0x3B, 0x51, 0xD5, 0xBF, 0x72, 
    0xFE, 0x17, 0x83, 0x07, 0xBC, 0x5D, 0x65, 0x10, 0x82, 0x06, 
    0xC8, 0x97, 0xB7, 0x99, 0xD6, 0x9A, 0x00, 0xF9, 0x73, 0x30, 
    0x0D, 0x12, 0x88, 0x08, 0xB1, 0xFA, 0xA1, 0x6D, 0x63, 0x9A, 
    0xFB, 0x07, 0xD5, 0xEB, 0xC4, 0x81, 0xBA, 0xAB, 0xC2, 0xFB, 
    0x7D, 0xDA, 0x98, 0xA8, 0x98, 0x5E, 0xEB, 0x4F, 0xAA, 0x2A, 
    0x4C, 0x19, 0xBE, 0x8A, 0x6E, 0xED, 0x6E, 0x6C, 0x94, 0x81, 
    0xFB, 0x64, 0xEB, 0x73, 0x56, 0xB6, 0x09, 0x8A, 0x53, 0xC4, 
    0x26, 0x08, 0x4A, 0x57, 0xA3, 0x21, 0xD5, 0x98, 0xC6, 0x46, 
    0x33, 0xE9, 0x4C, 0xCF, 0x27, 0x76, 0x5F, 0x6C, 0x7F, 0xFA, 
    0x8C, 0xB1, 0xD7, 0x63, 0x44, 0xA9, 0xB2, 0x7B, 0x3C, 0xF1, 
    0x53, 0x36, 0x79, 0x0F, 0x65, 0xE1, 0x6B, 0x78, 0x7C, 0x9E, 
    0x6B, 0x0C, 0x78, 0x82, 0x5F, 0x73, 0xC3, 0x9D, 0x6A, 0xB7, 
    0xA8, 0x82, 0xCB, 0x41, 0xA9, 0x55, 0x1E, 0x87, 0x59, 0xDB, 
    0x9A, 0x1E, 0x28, 0x04, 0xDF, 0x03, 0x33, 0x62, 0x1D, 0x77, 
    0x32, 0x1D, 0xE6, 0x10, 0x70, 0x0A, 0xDF, 0x8C, 0xFE, 0x8B, 
    0xD4, 0xBB, 0xA6, 0x8C, 0xE5, 0xB6, 0x4E, 0x6C, 0xE8, 0xF2, 
    0x6D, 0x34, 0x2E, 0x2E, 0xAE, 0xA8, 0xA7, 0x08, 0xEC, 0x8C, 
    0xA0, 0xC9, 0xD4, 0x4B, 0xCD, 0xC0, 0xEE, 0x8C, 0x86, 0x30, 
    0x94, 0x86, 0x57, 0xE8, 0xE1, 0x36, 0xE5, 0xA2, 0xE3, 0x73, 
    0x23, 0x3E, 0x08, 0x2F, 0xDA, 0x36, 0x80, 0x3D, 0x4B, 0x57, 
    0x41, 0x14, 0x2D, 0x3E, 0x84, 0x6F, 0x73, 0x6F, 0x5A, 0x36, 
    0x33, 0x8F, 0x30, 0x01, 0xCD, 0x68, 0x0B, 0x04, 0xCE, 0x2A, 
    0x60, 0xB9, 0xC2, 0x30, 0x27, 0xDA, 0xA9, 0xF4, 0x64, 0xE1, 
    0xF2, 0x33, 0x29, 0x81, 0x84, 0x8C, 0xA6, 0xD1, 0xB0, 0xE6, 
    0x48, 0x8E, 0x64, 0x91, 0x15, 0x37, 0xF5, 0x40, 0xCB, 0xF7, 
    0x19, 0x99, 0x4D, 0x4E, 0x29, 0x2C, 0xC5, 0x0F, 0xE1, 0x66, 
    0xA9, 0x0B, 0xA1, 0xF7, 0x2D, 0x37, 0x5B, 0xDA, 0xC5, 0xCE, 
    0xB6, 0x5E, 0xB7, 0xFB, 0xD6, 0x4E, 0xED, 0xDC, 0x94, 0x5B, 
    0x80, 0x1F, 0xB9, 0x92, 0x28, 0x35, 0x36, 0xCC, 0x4C, 0x5D, 
    0x83, 0x94, 0xC8, 0xF0, 0x3E, 0x51, 0x57, 0x08, 0x63, 0x58, 
    0x8F, 0x9C, 0xCC, 0x08, 0x06, 0x91, 0x8B, 0x16, 0x13, 0xB1, 
    0xA3, 0x81, 0x44, 0xB7, 0xAC, 0xBF, 0xD1, 0xC3, 0x2B, 0xB4, 
    0x3A, 0x8F, 0x2D, 0x95, 0xA3, 0x30, 0x69, 0x1F, 0x57, 0x77, 
    0xD1, 0xA2, 0x55, 0xBD, 0x23, 0xCD, 0x33, 0xDB, 0xB9, 0xBA, 
    };
    // zig fmt: on

    var server_msg_buf = [_]u8{0} ** 1500;
    std.mem.copyForwards(u8, &server_msg_buf, &resp_msg);
    const server_msg = server_msg_buf[0..resp_msg.len];

    const client_dst_con_id = [_]u8{ 0x83, 0x94, 0xC8, 0xF0, 0x3E, 0x51, 0x57, 0x08 };
    const pkt = try packet.InitialPacket.decodeFromSlice(server_msg, true);
    const secret = try key.InitialSecret.generate(&client_dst_con_id);

    var pn_len: usize = 0;
    var pn: u32 = 0;
    packet.unlockHeaderProtection(server_msg, pkt.protected_offset, &pn_len, &pn, pkt.sample, secret.server_secret.hp);
    try expect(pn_len == 2);
    try expect(pn == 0);

    const nonce = packet.getNonce(pn, secret.server_secret.iv);
    var m = [_]u8{0} ** 1500;
    const payload = server_msg[pkt.protected_offset + pn_len .. pkt.protected_offset + pkt.length.value];
    const plain = try aead.EasyAes128Gcm.decrypt(&m, payload, server_msg[0 .. pkt.protected_offset + pn_len], nonce, secret.server_secret.key);

    const frame = packet.Frame.decodeFromSlice(plain);
    try expect(frame == .ack);
    const ack_frame = frame.ack;
    try expect(ack_frame.largest_acked.value == 1);
    try expect(ack_frame.ack_delay.value == 0);
    try expect(ack_frame.ack_range_count.value == 0);
    try expect(ack_frame.first_ack_range.value == 0);

    const frame2 = packet.Frame.decodeFromSlice(plain[frame.length()..]);
    try expect(frame2 == .padding);
    try expect(frame2.padding.len == 329);

    const frame3 = packet.Frame.decodeFromSlice(plain[frame.length() + frame2.length() ..]);
    try expect(frame3 == .crypto);
    const crypto_frame = frame3.crypto;
    try expect(crypto_frame.offset.value == 0);
    try expect(crypto_frame.len.value == 90);
    var readStream = std.io.fixedBufferStream(crypto_frame.data);
    var hs = try tls13.handshake.Handshake.decode(readStream.reader(), std.testing.allocator, null);
    defer hs.deinit();
    try expect(try readStream.getEndPos() == try readStream.getPos());
    try expect(hs == tls13.handshake.Handshake.server_hello);
    const sh = hs.server_hello;
    try expect(sh.cipher_suite == .TLS_AES_128_GCM_SHA256);
    const exts = sh.extensions.items;
    try expect(exts.len == 2);
    try expect(exts[0] == .supported_versions);
    try expect(exts[1] == .key_share);
    const ks = exts[1].key_share;
    try expect(ks.entries.items[0].group == .x25519);

    var key_sched = try tls13.key.KeyScheduler.fromCipherSuite(sh.cipher_suite);
    const zero_bytes = &([_]u8{0} ** 64);
    try key_sched.generateEarlySecrets1(zero_bytes[0..key_sched.hkdf.digest_length]);

    const client_key = [_]u8{ 0x93, 0x70, 0xB2, 0xC9, 0xCA, 0xA4, 0x7F, 0xBA, 0xBA, 0xF4, 0x55, 0x9F, 0xED, 0xBA, 0x75, 0x3D, 0xE1, 0x71, 0xFA, 0x71, 0xF5, 0x0F, 0x1C, 0xE1, 0x5D, 0x43, 0xE9, 0x94, 0xEC, 0x74, 0xD7, 0x48 };
    const kex = ks.entries.items[0].key_exchange[0..32].*;
    const shared_key = try dh.X25519.scalarmult(client_key, kex);
    try key_sched.generateHandshakeSecrets1(&shared_key);

    var sh_bytes: [1024 * 2]u8 = undefined;
    var sh_stream = std.io.fixedBufferStream(&sh_bytes);
    _ = try sh_stream.write(&hs_ch_msg);
    _ = try sh_stream.write(crypto_frame.data);
    try key_sched.generateHandshakeSecrets2(sh_stream.getWritten());

    try expect(std.mem.eql(u8, key_sched.secret.early_secret.slice(), &[_]u8{ 0x33, 0xAD, 0x0A, 0x1C, 0x60, 0x7E, 0xC0, 0x3B, 0x09, 0xE6, 0xCD, 0x98, 0x93, 0x68, 0x0C, 0xE2, 0x10, 0xAD, 0xF3, 0x00, 0xAA, 0x1F, 0x26, 0x60, 0xE1, 0xB2, 0x2E, 0x10, 0xF1, 0x70, 0xF9, 0x2A }));
    try expect(std.mem.eql(u8, &shared_key, &[_]u8{ 0xA6, 0x25, 0xAD, 0xCD, 0xD8, 0x7B, 0xCE, 0x4C, 0x98, 0x0E, 0x6D, 0x6F, 0x3E, 0x08, 0xB7, 0x8A, 0xC4, 0xC6, 0xCD, 0x96, 0x89, 0xE0, 0x18, 0xFF, 0xF6, 0x0D, 0x52, 0xCF, 0x24, 0x89, 0x52, 0x03 }));
    try expect(std.mem.eql(u8, key_sched.secret.hs_secret.slice(), &[_]u8{ 0x77, 0x49, 0x22, 0xF1, 0xD9, 0xAC, 0xE8, 0xBB, 0xE7, 0x10, 0xD0, 0x21, 0x28, 0xA1, 0xAB, 0x7A, 0x56, 0x3B, 0xB7, 0xCC, 0x58, 0x18, 0x6A, 0x65, 0x32, 0x9D, 0xA2, 0x62, 0x92, 0xBF, 0x43, 0xA4 }));
    try expect(std.mem.eql(u8, key_sched.secret.c_hs_secret.slice(), &[_]u8{ 0xF1, 0x83, 0xC2, 0x76, 0xA9, 0xA9, 0x25, 0x82, 0x76, 0x71, 0xDE, 0x10, 0x40, 0x00, 0x75, 0x87, 0x01, 0xEE, 0x67, 0xE8, 0xD3, 0xA2, 0xE1, 0xC1, 0x85, 0xAB, 0x98, 0x3D, 0xE4, 0x63, 0xC0, 0x7E }));
    try expect(std.mem.eql(u8, key_sched.secret.s_hs_secret.slice(), &[_]u8{ 0xE1, 0x2D, 0x1C, 0x85, 0x53, 0x9E, 0x50, 0x6E, 0x58, 0xA6, 0x0E, 0x75, 0x33, 0x7B, 0xF0, 0xF5, 0x55, 0x80, 0x6B, 0x2A, 0xCB, 0xBC, 0x23, 0x07, 0xEA, 0x60, 0x8E, 0x30, 0x99, 0x52, 0x8E, 0x65 }));
}
